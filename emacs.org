#+TITLE: DotEmacs
#+PROPERTY: header-args :results silent

* Package
  #+BEGIN_SRC emacs-lisp
    (require 'package)

    (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
    ;; (add-to-list 'package-archives
    ;; '(("melpa" . "https://melpa.org/packages/")
    ;; ("melpa-stable" . "https://stable.melpa.org/packages/")
    ;; ("gnu" . "https://elpa.gnu.org/packages/")
    ;; ("org" . "https://orgmode.org/elpa/")) t)
    ;; (add-to-list 'package-archives
    ;;              '("melpa-stable" . "https://stable.melpa.org/packages/") t)
    (package-initialize)

    (defvar rc/package-contents-refreshed nil)

    (defun rc/package-refresh-contents-once ()
      (when (not rc/package-contents-refreshed)
        (setq rc/package-contents-refreshed t)
        (package-refresh-contents)))

    (defun rc/require-one-package (package)
      (when (not (package-installed-p package))
        (rc/package-refresh-contents-once)
        (package-install package)))

    (defun rc/require (&rest packages)
      (dolist (package packages)
        (rc/require-one-package package)))

    (defun rc/require-theme (theme)
      (let ((theme-package (->> theme
                                (symbol-name)
                                (funcall (-flip #'concat) "-theme")
                                (intern))))
        (rc/require theme-package)
        (load-theme theme t)))

    (rc/require 'dash)
    (require 'dash)

    (rc/require 'dash-functional)
    (require 'dash-functional)
  #+END_SRC
  
* Misc
  #+BEGIN_SRC emacs-lisp
    (require 'ansi-color)

    (global-set-key (kbd "C-c p") 'find-file-at-point)
    (global-set-key (kbd "C-c i m") 'imenu)

    (setq-default inhibit-splash-screen t
                  make-backup-files nil
                  tab-width 4
                  indent-tabs-mode nil
                  compilation-scroll-output t
                  default-input-method "russian-computer"
                  visible-bell (equal system-type 'windows-nt))

    (defun rc/colorize-compilation-buffer ()
      (toggle-read-only)
      (ansi-color-apply-on-region compilation-filter-start (point))
      (toggle-read-only))
    (add-hook 'compilation-filter-hook 'rc/colorize-compilation-buffer)

    (defun rc/buffer-file-name ()
      (if (equal major-mode 'dired-mode)
          default-directory
        (buffer-file-name)))

    (defun rc/parent-directory (path)
      (file-name-directory (directory-file-name path)))

    (defun rc/root-anchor (path anchor)
      (cond
       ((string= anchor "") nil)
       ((file-exists-p (concat (file-name-as-directory path) anchor)) path)
       ((string-equal path "/") nil)
       (t (rc/root-anchor (rc/parent-directory path) anchor))))

    (defun rc/clipboard-org-mode-file-link (anchor)
      (interactive "sRoot anchor: ")
      (let* ((root-dir (rc/root-anchor default-directory anchor))
             (org-mode-file-link (format "file:%s::%d"
                                         (if root-dir
                                             (file-relative-name (rc/buffer-file-name) root-dir)
                                           (rc/buffer-file-name))
                                         (line-number-at-pos))))
        (kill-new org-mode-file-link)
        (message org-mode-file-link)))

    ;;; Taken from here:
    ;;; http://stackoverflow.com/questions/2416655/file-path-to-clipboard-in-emacs
    (defun rc/put-file-name-on-clipboard ()
      "Put the current file name on the clipboard"
      (interactive)
      (let ((filename (rc/buffer-file-name)))
        (when filename
          (kill-new filename)
          (message filename))))

    (defun rc/put-buffer-name-on-clipboard ()
      "Put the current buffer name on the clipboard"
      (interactive)
      (kill-new (buffer-name))
      (message (buffer-name)))

    (defun rc/kill-autoloads-buffers ()
      (interactive)
      (dolist (buffer (buffer-list))
        (let ((name (buffer-name buffer)))
          (when (string-match-p "-autoloads.el" name)
            (kill-buffer buffer)
            (message "Killed autoloads buffer %s" name)))))

    (defun rc/start-python-simple-http-server ()
      (interactive)
      (shell-command "python -m SimpleHTTPServer 3001 &"
                     "*Simple Python HTTP Server*"))

    (global-set-key (kbd "C-x p s") 'rc/start-python-simple-http-server)

    ;;; Taken from here:
    ;;; http://blog.bookworm.at/2007/03/pretty-print-xml-with-emacs.html
    (defun bf-pretty-print-xml-region (begin end)
      "Pretty format XML markup in region. You need to have nxml-mode
    http://www.emacswiki.org/cgi-bin/wiki/NxmlMode installed to do
    this.  The function inserts linebreaks to separate tags that have
    nothing but whitespace between them.  It then indents the markup
    by using nxml's indentation rules."
      (interactive "r")
      (save-excursion
        (nxml-mode)
        (goto-char begin)
        (while (search-forward-regexp "\>[ \\t]*\<" nil t) 
          (backward-char) (insert "\n"))
        (indent-region begin end))
      (message "Ah, much better!"))

    ;;; Stolen from http://ergoemacs.org/emacs/emacs_unfill-paragraph.html
    (defun rc/unfill-paragraph ()
      "Replace newline chars in current paragraph by single spaces.
    This command does the inverse of `fill-paragraph'."
      (interactive)
      (let ((fill-column 90002000)) ; 90002000 is just random. you can use `most-positive-fixnum'
        (fill-paragraph nil)))

    (global-set-key (kbd "C-c M-q") 'rc/unfill-paragraph)

    (defun rc/load-path-here ()
      (interactive)
      (add-to-list 'load-path default-directory))

    (defconst rc/frame-transparency 85)

    (defun rc/toggle-transparency ()
      (interactive)
      (let ((frame-alpha (frame-parameter nil 'alpha)))
        (if (or (not frame-alpha)
                (= (cadr frame-alpha) 100))
            (set-frame-parameter nil 'alpha
                                 `(,rc/frame-transparency
                                   ,rc/frame-transparency))
          (set-frame-parameter nil 'alpha '(100 100)))))

    (defun rc/duplicate-line ()
      "Duplicate current line"
      (interactive)
      (move-beginning-of-line 1)
      (kill-line)
      (yank)
      (newline)
      (yank))

    (global-set-key (kbd "C-,") 'rc/duplicate-line)

    ;;; A little hack which fixes a problem with meta key in fluxbox under VNC.
    (setq x-alt-keysym 'meta)

    (setq confirm-kill-emacs 'y-or-n-p)
  #+END_SRC
* Appearance
  General appearance
  #+BEGIN_SRC emacs-lisp
    (defun rc/get-default-font ()
      (cond
       ((eq system-type 'windows-nt) "Consolas-13")
       ((eq system-type 'darwin) "Times-14")
       ((eq system-type 'gnu/linux) "Ubuntu Mono-12")))

    (add-to-list 'default-frame-alist `(font . ,(rc/get-default-font)))

    (when (display-graphic-p)
      (set-face-attribute 'fixed-pitch nil :font (rc/get-default-font)))

    (tool-bar-mode 0)
    (menu-bar-mode 0)
    (scroll-bar-mode 0)
    (column-number-mode 1)
    (show-paren-mode 1)

    (rc/require-theme 'zenburn)
  #+END_SRC
  
  display line numbers
  #+BEGIN_SRC emacs-lisp
    (when (version<= "26.0.50" emacs-version)
      (global-display-line-numbers-mode))
  #+END_SRC

  word-wrap
  #+BEGIN_SRC emacs-lisp
    (defun rc/enable-word-wrap ()
      (interactive)
      (toggle-word-wrap 1))

    (add-hook 'markdown-mode-hook 'rc/enable-word-wrap)
  #+END_SRC

  #+BEGIN_SRC emacs-lisp
    (setq whitespace-style
          '(face tabs spaces trailing space-before-tab newline indentation empty space-after-tab space-mark tab-mark)
          display-line-numbers-type 'relative
          frame-brackground-mode 'dark)
  #+END_SRC
* Org
  org
  #+BEGIN_SRC emacs-lisp
    (require 'org)

    (global-set-key (kbd "C-x a") 'org-agenda)
    (global-set-key (kbd "C-c C-x j") #'org-clock-jump-to-current-clock)

    (setq org-directory "~/org/org")
    (setq org-agenda-files (list "~/org/org/"))
    (setq org-default-notes-file (concat org-directory "/capture.org"))

    (setq org-export-backends '(md))

    (defun rc/org-increment-move-counter ()
      (interactive)

      (defun default (x d)
        (if x x d))

      (let* ((point (point))
             (move-counter-name "MOVE_COUNTER")
             (move-counter-value (-> (org-entry-get point move-counter-name)
                                     (default "0")
                                     (string-to-number)
                                     (1+))))
        (org-entry-put point move-counter-name
                       (number-to-string move-counter-value)))
      nil)

    (defun rc/org-get-heading-name ()
      (nth 4 (org-heading-components)))

    (defun rc/org-kill-heading-name-save ()
      (interactive)
      (let ((heading-name (rc/org-get-heading-name)))
        (kill-new heading-name)
        (message "Kill \"%s\"" heading-name)))

    (global-set-key (kbd "C-x p w") 'rc/org-kill-heading-name-save)

    (setq org-agenda-custom-commands
          '(("u" "Unscheduled" tags "+personal-SCHEDULED={.+}-DEADLINE={.+}/!+TODO"
             ((org-agenda-sorting-strategy '(priority-down))))
            ("p" "Personal" ((agenda "" ((org-agenda-tag-filter-preset (list "+personal"))))))
            ("w" "Work" ((agenda "" ((org-agenda-tag-filter-preset (list "+work"))))))
            ))

    (require 'ox-latex)
    (require 'ox-beamer)

  #+END_SRC

  org-cliplink
  #+BEGIN_SRC emacs-lisp
    (rc/require 'org-cliplink)

    (global-set-key (kbd "C-x p i") 'org-cliplink)

    (defun rc/cliplink-task ()
      (interactive)
      (org-cliplink-retrieve-title
       (substring-no-properties (current-kill 0))
       '(lambda (url title)
          (insert (if title
                      (concat "* TODO " title
                              "\n  [[" url "][" title "]]")
                    (concat "* TODO " url
                            "\n  [[" url "]]"))))))
    (global-set-key (kbd "C-x p t") 'rc/cliplink-task)
  #+END_SRC

  org-capture
  #+BEGIN_SRC emacs-lisp
    (require 'org-protocol)

    (defun find-journal-tree-func ()
      (defun find-subtree (format level)
        (let ((name (format-time-string format)))
          (if (re-search-forward
               (format org-complex-heading-regexp-format (regexp-quote name))
               nil t)
              (goto-char (point-at-bol))
            (goto-char (point-max))
            (or (bolp) (insert "\n"))
            (insert level " " name "\n")
            (beginning-of-line 0))
          ))
      (goto-char (point-min))
      (find-subtree "%Y" "*")
      (find-subtree "%Y-%m" "**")
      (find-subtree "%Y-%m-%d" "***")
      (org-end-of-subtree))

    (setq org-capture-templates
          '(("w" "Capture task" entry (file+headline "~/org/org/tasks.org" "Inbox")
             "** TODO %?\n  SCHEDULED: %t\n")

            ("K" "Cliplink capture task" entry (file+headline "~/org/org/tasks.org" "Inbox")
             "* TODO %(org-cliplink-capture) \n  SCHEDULED: %t\n" :empty-lines 1)

            ("n" "Note" entry (file+function "~/org/org/notes.org" find-journal-tree-func)
             "* %U - %?\n  %i\n" :kill-buffer t :empty-lines 0)

            ("p" "Protocol" entry (file+headline "~/org/org/tasks.org" "Inbox")
             "* %^{Title}\nSource: %u, %c\n #+BEGIN_QUOTE\n%i\n#+END_QUOTE\n\n\n%?")

            ("L" "Protocol Link" entry (file+headline "~/org/org/tasks.org" "Inbox")
             "* %? [[%:link][%:description]] \nCaptured On: %U")))

    (setq org-protocol-default-template-key "n")
    (define-key global-map "\C-cc" 'org-capture)

  #+END_SRC

  org-journal
  #+BEGIN_SRC emacs-lisp
    (rc/require 'org-journal)
    (require 'org-journal)
    (setq org-journal-dir "~/org/org/journal/")
    (setq org-journal-date-format "%A, %d %B %Y")
    (setq org-journal-file-format "%Y-%m-%d.org")
    (defun org-journal-save-entry-and-exit()
      "Simple convenience function.
      Saves the buffer of the current day's entry and kills the window
      Similar to org-capture like behavior"
      (interactive)
      (save-buffer)
      (kill-buffer-and-window))

    (defun get-journal-file-today ()
      "Gets filename for today's journal entry."
      (let ((daily-name (format-time-string org-journal-file-format)))
        (expand-file-name (concat org-journal-dir daily-name))))

    (defun journal-file-today ()
      "Creates and load a journal file based on today's date."
      (interactive)
      (find-file (get-journal-file-today)))

    (defun get-journal-file-yesterday ()
      "Gets filename for yesterday's journal entry."
      (let* ((yesterday (time-subtract (current-time) (days-to-time 1)))
             (daily-name (format-time-string org-journal-file-format yesterday)))
        (expand-file-name (concat org-journal-dir daily-name))))

    (defun journal-file-yesterday ()
      "Creates and load a file based on yesterday's date."
      (interactive)
      (find-file (get-journal-file-yesterday)))

    (define-key org-journal-mode-map (kbd "C-x C-s") 'org-journal-save-entry-and-exit)
    (define-key global-map (kbd "C-c t") 'journal-file-today)
    (define-key global-map (kbd "C-c y") 'journal-file-yesterday)
  #+END_SRC

  roam
  #+BEGIN_SRC emacs-lisp
    (rc/require 'org-roam)
    (require 'org-roam)
    (setq org-roam-capture-templates
          '(("d" "default" plain (function org-roam--capture-get-point)
             "%?"
             :file-name "%<%Y%m%d%H%M>-${slug}"
             :head "#+TITLE:${title}\n#+ROAM_KEY: %<%Y%m%d%H%M>\n#+ROAM_ALIAS:\n#+ROAM_TAGS: private \n%i"
             :unnarrowed t)))

    (setq org-roam-capture-ref-templates
          '(("r" "ref" plain (function org-roam--capture-get-point)
             "%?"
             :file-name "ref-${slug}"
             :head "#+TITLE: ${title}\n#+ROAM_ALIAS:\n#+ROAM_KEY: ${ref} \n#+ROAM_TAGS: \n${ref} "
             :unnarrowed t)))

    (setq org-roam-directory "~/org/roam")
    (setq org-roam-db-location "~/org-roam.db")
    (add-hook 'after-init-hook 'org-roam-mode)
    (setq org-roam-completion-system 'ivy)
    (setq org-roam-db-update-method 'immediate)
    (define-key global-map (kbd "<f9>") 'org-roam-capture)
    (define-key org-roam-mode-map (kbd "<f10>") 'org-roam-insert)
    (define-key org-roam-mode-map (kbd "C-c f") 'org-roam-find-file)
    (define-key org-roam-mode-map (kbd "C-c r") 'org-roam-buffer-toggle-display)
    (define-key org-roam-mode-map (kbd "C-c b") 'org-roam-switch-to-buffer)
    (define-key org-roam-mode-map (kbd "C-c d") 'org-roam-find-directory)

    (require 'org-protocol)
    (require 'org-roam-protocol)

    (require 'org-roam-server nil 'noerror)
    (setq org-roam-server-host "127.0.0.1"
          org-roam-server-port 4917
          org-roam-server-authenticate nil
          org-roam-server-export-inline-images t
          org-roam-server-serve-files nil
          org-roam-server-served-file-extensions '("pdf" "mp4" "ogv")
          org-roam-server-network-poll t
          org-roam-server-network-arrows nil
          org-roam-server-network-label-truncate t
          org-roam-server-network-label-truncate-length 60
          org-roam-server-network-label-wrap-length 20)
  #+END_SRC

  #+BEGIN_SRC emacs-lisp
    (rc/require
     'org-special-block-extras
     )

    (setq org-agenda-dim-blocked-tasks nil
          org-agenda-exporter-settings '((org-agenda-tag-filter-preset (list "+personal")))
          org-cliplink-transport-implementation 'url-el
          org-enforce-todo-dependencies nil
          org-modules '(org-bbdb org-bibtex org-docview org-gnus org-habit org-info org-irc org-mhe org-rmail org-w3m)
          org-refile-use-outline-path 'file)
  #+END_SRC
* mu4e
  #+BEGIN_SRC emacs-lisp
    (add-to-list 'load-path "/usr/share/emacs/site-lisp/mu4e")
    (require 'mu4e nil 'noerror)

    (setq mu4e-use-fancy-chars t)
    (setq mu4e-view-show-images t)
    (when (fboundp 'imagemagick-register-types)
      (imagemagick-register-types))
    (setq mu4e-compose-in-new-frame t)

    (setq mu4e-sent-messages-behavior 'delete)

    (add-hook 'mu4e-view-mode-hook
              (lambda()
                (local-set-key (kbd "<RET>") 'mu4e~view-browse-url-from-binding)
                (local-set-key (kbd "<tab>") 'shr-next-link)
                (local-set-key (kbd "<backtab>") 'shr-previous-link)))

    (add-hook 'mu4e-compose-mode-hook
              (defun my-do-compose-stuff ()
                "My settings for message composition."
                (visual-line-mode)
                (org-mu4e-compose-org-mode)
                (use-hard-newlines -1)
                (flyspell-mode)))

    (setq mail-user-agent 'mu4e-user-agent)

    (setq mu4e-drafts-folder "/[Gmail].Rascunhos")
    (setq mu4e-sent-folder   "/[Gmail].E-mails enviados")
    (setq mu4e-trash-folder  "/[Gmail].Lixeira")

    (setq mu4e-maildir-shortcuts
          '((:maildir "/INBOX"              :key ?i)
            (:maildir "/[Gmail].E-mails enviados"  :key ?s)
            (:maildir "/[Gmail].Lixeira"      :key ?t)
            (:maildir "/[Gmail].Todos os e-mails"   :key ?a)))

    (setq mu4e-get-mail-command "offlineimap"
          mu4e-update-interval 600)

    (setq user-mail-address "yagaot@gmail.com"
          user-full-name  "Yago Teixeira")

    (require 'smtpmail nil 'noerror)
    (setq message-send-mail-function 'smtpmail-send-it
          starttls-use-gnutls t
          smtpmail-starttls-credentials '(("smtp.gmail.com" 587 nil nil))
          smtpmail-auth-credentials
          '(("smtp.gmail.com" 587 "yagaot@gmail.com" nil))
          smtpmail-default-smtp-server "smtp.gmail.com"
          smtpmail-smtp-server "smtp.gmail.com"
          smtpmail-smtp-service 587)

    (setq message-kill-buffer-on-exit t)
  #+END_SRC

* ido
  #+BEGIN_SRC emacs-lisp
    (rc/require 'smex 'ido-completing-read+)

    (require 'ido-completing-read+)

    (ido-mode 1)
    (ido-everywhere 1)
    (ido-ubiquitous-mode 1)

    (global-set-key (kbd "M-x") 'smex)
    (global-set-key (kbd "C-c C-c M-x") 'execute-extended-command)
  #+END_SRC

* c-mode
  #+BEGIN_SRC emacs-lisp
    (setq-default c-basic-offset 4
                  c-default-style '((java-mode . "java")
                                    (awk-mode . "awk")
                                    (other . "bsd")))

    (add-to-list 'auto-mode-alist '("\\.h\\'" . c++-mode))

    (add-hook 'c-mode-hook (lambda ()
                             (interactive)
                             (c-toggle-comment-style -1)))
  #+END_SRC

* Paredit
  #+BEGIN_SRC emacs-lisp
    (rc/require 'paredit)

    (defun rc/turn-on-paredit ()
      (interactive)
      (paredit-mode 1))

    (add-hook 'emacs-lisp-mode-hook  'rc/turn-on-paredit)
    (add-hook 'clojure-mode-hook     'rc/turn-on-paredit)
    (add-hook 'lisp-mode-hook        'rc/turn-on-paredit)
    (add-hook 'common-lisp-mode-hook 'rc/turn-on-paredit)
    (add-hook 'scheme-mode-hook      'rc/turn-on-paredit)
    (add-hook 'racket-mode-hook      'rc/turn-on-paredit)
  #+END_SRC

* Emacs lisp
  #+BEGIN_SRC emacs-lisp
    (add-hook 'emacs-lisp-mode-hook
              '(lambda ()
                 (local-set-key (kbd "C-c C-j")
                                (quote eval-print-last-sexp))))
    (add-to-list 'auto-mode-alist '("Cask" . emacs-lisp-mode))
  #+END_SRC

* Haskell
  #+BEGIN_SRC emacs-lisp
    (rc/require 'haskell-mode)

    (setq haskell-process-type 'cabal-new-repl)
    (setq haskell-process-log t)

    (add-hook 'haskell-mode-hook 'haskell-indent-mode)
    (add-hook 'haskell-mode-hook 'interactive-haskell-mode)
    (add-hook 'haskell-mode-hook 'haskell-doc-mode)
    (add-hook 'haskell-mode-hook 'hindent-mode)
  #+END_SRC

* Whitespace
  #+BEGIN_SRC emacs-lisp
    (defun rc/set-up-whitespace-handling ()
      (interactive)
      (whitespace-mode 1)
      (add-to-list 'write-file-functions 'delete-trailing-whitespace))

    (add-hook 'tuareg-mode-hook 'rc/set-up-whitespace-handling)
    (add-hook 'c++-mode-hook 'rc/set-up-whitespace-handling)
    (add-hook 'c-mode-hook 'rc/set-up-whitespace-handling)
    (add-hook 'emacs-lisp-mode 'rc/set-up-whitespace-handling)
    (add-hook 'java-mode-hook 'rc/set-up-whitespace-handling)
    (add-hook 'lua-mode-hook 'rc/set-up-whitespace-handling)
    (add-hook 'rust-mode-hook 'rc/set-up-whitespace-handling)
    (add-hook 'scala-mode-hook 'rc/set-up-whitespace-handling)
    (add-hook 'markdown-mode-hook 'rc/set-up-whitespace-handling)
    (add-hook 'js2-mode-hook 'rc/set-up-whitespace-handling)
    (add-hook 'haskell-mode-hook 'rc/set-up-whitespace-handling)
    (add-hook 'python-mode-hook 'rc/set-up-whitespace-handling)
    (add-hook 'erlang-mode-hook 'rc/set-up-whitespace-handling)
    (add-hook 'asm-mode-hook 'rc/set-up-whitespace-handling)
    (add-hook 'nasm-mode-hook 'rc/set-up-whitespace-handling)
    (add-hook 'go-mode-hook 'rc/set-up-whitespace-handling)
    (add-hook 'nim-mode-hook 'rc/set-up-whitespace-handling)
    (add-hook 'yaml-mode-hook 'rc/set-up-whitespace-handling)
  #+END_SRC

* Magit
  magit requres this lib, but it is not installed automatically on Windows.
  #+BEGIN_SRC emacs-lisp
    (rc/require 'cl-lib)
    (rc/require 'magit)

    (setq magit-auto-revert-mode nil)

    (global-set-key (kbd "C-c m s") 'magit-status)
    (global-set-key (kbd "C-c m l") 'magit-log)
  #+END_SRC

* Multiple cursors
  #+BEGIN_SRC emacs-lisp
    (rc/require 'multiple-cursors)

    (global-set-key (kbd "C-S-c C-S-c") 'mc/edit-lines)
    (global-set-key (kbd "C->")         'mc/mark-next-like-this)
    (global-set-key (kbd "C-<")         'mc/mark-previous-like-this)
    (global-set-key (kbd "C-c C-<")     'mc/mark-all-like-this)
    (global-set-key (kbd "C-\"")        'mc/skip-to-next-like-this)
    (global-set-key (kbd "C-:")         'mc/skip-to-previous-like-this)
  #+END_SRC

* Dired
  #+BEGIN_SRC emacs-lisp
    (require 'dired-x)
    (setq dired-omit-files
          (concat dired-omit-files "\\|^\\..+$"))
    (setq-default dired-dwim-target t)
    (setq dired-listing-switches "-alh")
  #+END_SRC

* Helm
  #+BEGIN_SRC emacs-lisp
    (rc/require 'helm 'helm-cmd-t 'helm-git-grep 'helm-ls-git)

    (setq helm-ff-transformer-show-only-basename nil)

    (global-set-key (kbd "C-c h t") 'helm-cmd-t)
    (global-set-key (kbd "C-c h g g") 'helm-git-grep)
    (global-set-key (kbd "C-c h g l") 'helm-ls-git-ls)
    (global-set-key (kbd "C-c h f") 'helm-find)
    (global-set-key (kbd "C-c h a") 'helm-org-agenda-files-headings)
    (global-set-key (kbd "C-c h r") 'helm-recentf)
  #+END_SRC

* Yasnippet
  #+BEGIN_SRC emacs-lisp
    (rc/require 'yasnippet)

    (require 'yasnippet)

    (setq yas/triggers-in-field nil)
    (setq yas-snippet-dirs '("~/.emacs.snippets/"))

    (yas-global-mode 1)
  #+END_SRC

* js2
  #+BEGIN_SRC emacs-lisp
    (rc/require 'js2-mode)

    (add-to-list 'auto-mode-alist '("\\.js\\'" . js2-mode))
    (add-to-list 'interpreter-mode-alist '("node" . js2-mode))

    (add-to-list 'auto-mode-alist '("\\.jsx\\'" . js2-jsx-mode))
    (add-to-list 'interpreter-mode-alist '("node". js2-jsx-mode))

    ;;; nxml
    (add-to-list 'auto-mode-alist '("\\.html\\'" . nxml-mode))
    (add-to-list 'auto-mode-alist '("\\.xsd\\'" . nxml-mode))
    (add-to-list 'auto-mode-alist '("\\.ant\\'" . nxml-mode))
  #+END_SRC
* Enviroment
  tramp
  #+BEGIN_SRC emacs-lisp
    (setq tramp-auto-save-directory "/tmp")
  #+END_SRC

  powershell
  #+BEGIN_SRC emacs-lisp
    (rc/require 'powershell)
    (add-to-list 'auto-mode-alist '("\\.ps1\\'" . powershell-mode))
    (add-to-list 'auto-mode-alist '("\\.psm1\\'" . powershell-mode))
  #+END_SRC

  key rebind
  #+BEGIN_SRC emacs-lisp
    (setq w32-pass-lwindow-to-system nil)
    (setq w32-lwindow-modifier 'super) ; Left Windows key

    (setq w32-pass-rwindow-to-system nil)
    (setq w32-rwindow-modifier 'super) ; Right Windows key

    (setq w32-pass-apps-to-system nil)
    (setq w32-apps-modifier 'hyper)

    (setq mac-command-modifier 'super) ; make cmd key do Meta
    (setq mac-option-modifier 'meta) ; make opt key do Super
    (setq mac-control-modifier 'control)
    (setq ns-function-modifier 'hyper)

    (global-set-key (kbd "<f7>") 'compile)

    (global-set-key (kbd "<f6>") (lambda ()
                                   (interactive)
                                   (other-window 1)
                                   (kill-buffer-and-window)))


    (global-set-key (kbd "<S-mouse-4>") 'other-window)
    (global-set-key (kbd "<s-up>") 'other-window)

  #+END_SRC
* eldoc
  #+BEGIN_SRC emacs-lisp
    (defun rc/turn-on-eldoc-mode ()
      (interactive)
      (eldoc-mode 1))

    (add-hook 'emacs-lisp-mode-hook 'rc/turn-on-eldoc-mode)
  #+END_SRC
* Company
  #+BEGIN_SRC emacs-lisp
    (rc/require 'company)
    (require 'company)

    (global-company-mode)

    (add-hook 'tuareg-mode-hook
              (lambda ()
                (interactive)
                (company-mode 0)))
  #+END_SRC
* Tide
  #+BEGIN_SRC emacs-lisp
    (rc/require 'tide)

    (defun rc/turn-on-tide ()
      (interactive)
      (tide-setup))

    (add-hook 'typescript-mode-hook 'rc/turn-on-tide)
  #+END_SRC
* Editorconfig
  #+BEGIN_SRC emacs-lisp
    (rc/require 'editorconfig)
    (editorconfig-mode 1)
  #+END_SRC
* Proof general
  #+BEGIN_SRC emacs-lisp
    (rc/require 'proof-general)
    (add-hook 'coq-mode-hook
              '(lambda ()
                 (local-set-key (kbd "C-c C-q C-n")
                                (quote proof-assert-until-point-interactive))))
  #+END_SRC
* Nasm Mode
  #+BEGIN_SRC emacs-lisp
    (rc/require 'nasm-mode)
    (add-to-list 'auto-mode-alist '("\\.asm\\'" . nasm-mode))
  #+END_SRC
* LaTeX mode
  #+BEGIN_SRC emacs-lisp
    (add-hook 'tex-mode-hook
              (lambda ()
                (interactive)
                (add-to-list 'tex-verbatim-environments "code")))
  #+END_SRC
* Ebisp
  #+BEGIN_SRC emacs-lisp
    (add-to-list 'auto-mode-alist '("\\.ebi\\'" . lisp-mode))
  #+END_SRC
* Move Text
  #+BEGIN_SRC emacs-lisp
    (rc/require 'move-text)
    (global-set-key (kbd "M-p") 'move-text-up)
    (global-set-key (kbd "M-n") 'move-text-down)
  #+END_SRC  
* Other Packages
  #+BEGIN_SRC emacs-lisp
    (rc/require
     'scala-mode
     'd-mode
     'yaml-mode
     'glsl-mode
     'tuareg
     'lua-mode
     'less-css-mode
     'graphviz-dot-mode
     'clojure-mode
     'cmake-mode
     'rust-mode
     'csharp-mode
     'nim-mode
     'jinja2-mode
     'markdown-mode
     'purescript-mode
     'nix-mode
     'dockerfile-mode
     'toml-mode
     'nginx-mode
     'kotlin-mode
     'go-mode
     'php-mode
     'racket-mode
     'qml-mode
     'ag
     'hindent
     'elpy
     'typescript-mode
     'dired-sidebar
     'ivy
     'swift-mode
     'rainbow-delimiters
     'rainbow-identifiers
     'auctex 
     'zenburn-theme
     'proof-general
     'elpy
     'hindent
     'ag
     'qml-mode
     'racket-mode
     'php-mode
     'go-mode
     'kotlin-mode
     'nginx-mode
     'toml-mode
     'dockerfile-mode
     'nix-mode
     'purescript-mode
     'markdown-mode
     'jinja2-mode
     'nim-mode
     'csharp-mode
     'rust-mode
     'cmake-mode
     'clojure-mode
     'graphviz-dot-mode
     'lua-mode
     'tuareg 
     'glsl-mode
     'yaml-mode
     'd-mode
     'scala-mode
     'move-text
     'nasm-mode
     'editorconfig 
     'tide 
     'company
     'powershell
     'js2-mode 
     'yasnippet
     'helm-ls-git
     'helm-git-grep
     'helm-cmd-t
     'helm 
     'multiple-cursors
     'magit
     'haskell-mode
     'paredit 
     'ido-completing-read+
     'smex 
     'gruber-darker-theme
     'org-cliplink 
     'dash-functional
     'dash
     'pdf-tools
     )
  #+END_SRC
* Latin
  #+BEGIN_SRC emacs-lisp
    (defun wwwd ()
      "Lookup Latin word at point with William Whitaker's Words program"
      (interactive )
      (shell-command (concat "latin " (thing-at-point 'word))))

    (global-set-key (kbd "<f12>") 'wwwd)
  #+END_SRC
* Tab indent
  #+BEGIN_SRC emacs-lisp
    (setq-default indent-tabs-mode t)
    (setq-default tab-width 4) ; Assuming you want your tabs to be four spaces wide
                                            ;(defvaralias 'c-basic-offset 'tab-width)

  #+END_SRC
* Revert all buffers
  #+BEGIN_SRC emacs-lisp
    (defun revert-all-file-buffers ()
      "Refresh all open file buffers without confirmation.
    Buffers in modified (not yet saved) state in emacs will not be reverted. They
    will be reverted though if they were modified outside emacs.
    Buffers visiting files which do not exist any more or are no longer readable
    will be killed."
      (interactive)
      (dolist (buf (buffer-list))
        (let ((filename (buffer-file-name buf)))
          ,* Revert only buffers containing files, which are not modified;
          ,* do not try to revert non-file buffers like *Messages*.
          (when (and filename
                     (not (buffer-modified-p buf)))
            (if (file-readable-p filename)
                ,* If the file exists and is readable, revert the buffer.
                (with-current-buffer buf
                  (revert-buffer :ignore-auto :noconfirm :preserve-modes))
                ,* Otherwise, kill the buffer.
                (let (kill-buffer-query-functions) ; No query done when killing buffer
                  (kill-buffer buf)
                  (message "Killed non-existing/unreadable file buffer: %s" filename))))))
      (message "Finished reverting buffers containing unmodified files."))


    (global-set-key (kbd "<f5>") 'revert-buffer)
    (global-set-key (kbd "M-<f5>") 'revert-all-file-buffers)

    (put 'dired-find-alternate-file 'disabled nil)

  #+END_SRC

* Dired sidebar
  #+BEGIN_SRC emacs-lisp
    (global-set-key (kbd "C-x C-n") 'dired-sidebar-toggle-sidebar)
    (setq dired-sidebar-subtree-line-prefix "__")
    (setq dired-sidebar-theme 'ascii)
    (setq dired-sidebar-use-term-integration t)

  #+END_SRC

* Site Config 
  #+BEGIN_SRC emacs-lisp
    (setq org-export-html-style-include-scripts nil
          org-export-html-style-include-default nil
          org-html-head-include-scripts nil
          org-html-head-include-default-style nil)
    (setq org-export-html-style "")
    (defun html-body-id-filter (output backend info)
      "Remove random ID attributes generated by Org."
      (when (eq backend 'html)
        (replace-regexp-in-string
         " id=\"[[:alpha:]-]*org[[:alnum:]]\\{7\\}\""
         ""
         output t)))

    (setq org-publish-project-alist
          '(("orgfiles"
             :base-directory "~/Site"
             :base-extension "org"
             :recursive t
             :exclude "setup.org\\|footer.org\\|header.org\\|latexconfig.org"
             :publishing-directory "~/Prog/site"
             :publishing-function org-html-publish-to-html
             )

            ("static"
             :base-directory "~/Site"
             :base-extension "css\\|jpg\\|gif\\|png\\|ico"
             :recursive t
             :publishing-directory "~/Prog/site"
             :publishing-function org-publish-attachment
             )

            ("site" :components ("orgfiles" "static"))))
    (setq org-latex-images-centered nil)

  #+END_SRC

* MIX
  #+BEGIN_SRC emacs-lisp
    (setq load-path (cons "~/.emacs.rc/mdk" load-path))

    (autoload 'mixal-mode "mixal-mode" t)
    (add-to-list 'auto-mode-alist '("\\.mixal\\'" . mixal-mode))

    (autoload 'mixvm "mixvm" "mixvm/gud interaction" t)
  #+END_SRC

* GGTAGS
  #+BEGIN_SRC emacs-lisp
    (add-hook 'c-mode-common-hook
              (lambda ()
                (when (derived-mode-p 'c-mode 'c++-mode 'java-mode)
                  (ggtags-mode 1))))
  #+END_SRC

* lsp-mode
  #+BEGIN_SRC emacs-lisp
    (setq lsp-keymap-prefix "s-l")
  (rc/require 'lsp-mode)
    (require 'lsp-mode nil 'noerror)
    (add-hook 'c-mode-hook #'lsp)
    (add-hook 'c++-mode-hook #'lsp)
    (add-hook 'clojure-mode-hook #'lsp)
    (add-hook 'clojurescript-mode-hook #'lsp)
    (add-hook 'java-mode-hook #'lsp)
  #+END_SRC

* pdf-tools
  #+BEGIN_SRC emacs-lisp
    (require 'pdf-tools)
    (pdf-loader-install)
    (setq pdf-annot-activate-created-annotations t)
    (define-key pdf-view-mode-map (kbd "C-s") 'isearch-forward)
  #+END_SRC
 
